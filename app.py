import asyncio, os, json, re, random
from pathlib import Path
from typing import Dict, Any, Optional

import yaml
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

# ---- ENV ----
BASE = Path(__file__).parent
load_dotenv(BASE / ".env")
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN:
    raise SystemExit("–í .env –Ω–µ—Ç BOT_TOKEN. –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –∏–∑ @BotFather –∏ –∑–∞–ø—É—Å—Ç–∏ —Å–Ω–æ–≤–∞.")

# ---- Files / Storage ----
DATA = BASE / "data"
DATA.mkdir(exist_ok=True)
STORE = DATA / "progress.json"


def db_load() -> Dict[str, Any]:
    if STORE.exists():
        try:
            return json.loads(STORE.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}


def db_save(d: Dict[str, Any]) -> None:
    tmp = STORE.with_suffix(".tmp")
    tmp.write_text(json.dumps(d, ensure_ascii=False, indent=2), encoding="utf-8")
    tmp.replace(STORE)


def get_state(uid: int) -> Dict[str, Any]:
    db = db_load()
    return db.get(str(uid), {"current": QCFG["start_point_id"], "history": [], "prize": None})


def set_state(uid: int, st: Dict[str, Any]) -> None:
    db = db_load()
    db[str(uid)] = st
    db_save(db)

# ---- Quest config ----
QCFG = yaml.safe_load((BASE / "quest.yaml").read_text(encoding="utf-8"))["quest"]
POINTS = {p["id"]: p for p in QCFG["points"]}


def next_point_id(cur: str) -> Optional[str]:
    ids = [p["id"] for p in QCFG["points"]]
    if cur not in ids:
        return None
    i = ids.index(cur)
    return ids[i+1] if i + 1 < len(ids) else None


def validate_text(ans: str, rule: Dict[str, Any]) -> bool:
    if not ans:
        return False
    ans = ans.strip()
    if "any_of_regex" in rule:
        return any(re.search(pat, ans, flags=re.IGNORECASE) for pat in rule["any_of_regex"])
    if "min_len" in rule:
        return len(ans) >= int(rule["min_len"])
    return True


def make_code(pattern: str) -> str:
    m = re.search(r"\{rand:(\d+)\}", pattern)
    if m:
        n = int(m.group(1))
        rnd = "".join(random.choice("0123456789") for _ in range(n))
        return pattern.replace(m.group(0), rnd)
    return pattern


def fmt_point(p: Dict[str, Any]) -> str:
    return f"üìç <b>{p.get('title','')}</b>\n\n{p.get('instruction','')}"


# ---- Bot / FSM ----
class Flow(StatesGroup):
    Waiting = State()


bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    st = {"current": QCFG["start_point_id"], "history": [], "prize": None}
    set_state(m.from_user.id, st)
    await state.set_state(Flow.Waiting)
    await m.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ <b>{QCFG['title']}</b>.\n"
        f"–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏. /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞.\n\n"
        + fmt_point(POINTS[st['current']])
    )


@dp.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer("–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n‚Äî –ë–æ—Ç –¥–∞—ë—Ç —Ç–æ—á–∫—É –∏ –∑–∞–¥–∞–Ω–∏–µ.\n‚Äî –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –ø–æ —É—Å–ª–æ–≤–∏—é.\n‚Äî –ü–æ–ª—É—á–∏—à—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É.\n\n–ö–æ–º–∞–Ω–¥—ã: /progress, /reset")


@dp.message(Command("progress"))
async def cmd_progress(m: Message):
    st = get_state(m.from_user.id)
    cur = st["current"]
    done = len(st.get("history", []))
    title = POINTS.get(cur, {}).get("title", "?")
    await m.answer(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–æ—á–µ–∫: {done}\n–¢–µ–∫—É—â–∞—è: <b>{title}</b>")


@dp.message(Command("reset"))
async def cmd_reset(m: Message, state: FSMContext):
    st = {"current": QCFG["start_point_id"], "history": [], "prize": None}
    set_state(m.from_user.id, st)
    await state.set_state(Flow.Waiting)
    await m.answer("–ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ ‚úÖ\n\n" + fmt_point(POINTS[st["current"]]))


@dp.message(Flow.Waiting, F.text | F.photo)
async def flow(m: Message, state: FSMContext):
    st = get_state(m.from_user.id)
    cur_id = st["current"]
    p = POINTS.get(cur_id)
    if not p:
        await m.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É. –ù–∞–ø–∏—à–∏ /reset.")
        return

    ptype = p["type"]
    ok = False

    if ptype == "text":
        if not m.text:
            await m.answer("–ó–¥–µ—Å—å –Ω—É–∂–µ–Ω <b>—Ç–µ–∫—Å—Ç–æ–≤—ã–π</b> –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return
        ok = validate_text(m.text, p.get("text_accept", {}))

    elif ptype == "photo":
        if not m.photo:
            await m.answer("–ó–¥–µ—Å—å –Ω—É–∂–Ω–æ <b>—Ñ–æ—Ç–æ</b>. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç.")
            return
        ok = True

    elif ptype == "text_or_photo":
        if m.text:
            ok = validate_text(m.text, p.get("text_accept", {}))
        elif m.photo:
            ok = True
        else:
            await m.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.")
            return

    elif ptype == "finish":
        if st.get("prize"):
            await m.answer(f"–¢–≤–æ–π –ø—Ä–∏–∑–æ–≤–æ–π –∫–æ–¥: <b>{st['prize']}</b>\n–ü–æ–∫–∞–∂–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.")
            return
        prize = p.get("prize", {})
        code = make_code(prize.get("pattern", "SLON-{rand:6}"))
        st["prize"] = code
        set_state(m.from_user.id, st)
        await m.answer(f"–§–∏–Ω–∏—à! üéâ\n–¢–≤–æ–π –ø—Ä–∏–∑–æ–≤–æ–π –∫–æ–¥: <b>{code}</b>\n{prize.get('instructions','–ü–æ–∫–∞–∂–∏ –∫–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.')}")
        return

    if not ok:
        await m.answer("–ü–æ—á—Ç–∏! –ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –∑–∞–¥–∞–Ω–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # success on point
    if cur_id not in st["history"]:
        st["history"].append(cur_id)
    nxt = next_point_id(cur_id)
    if not nxt:
        st["current"] = QCFG["finish_point_id"]
        set_state(m.from_user.id, st)
        await m.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞. –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑–æ–≤–æ–π –∫–æ–¥.")
        return

    st["current"] = nxt
    set_state(m.from_user.id, st)

    hint = p.get("hint_after_ok")
    if hint:
        await m.answer("–ó–∞—Å—á–∏—Ç–∞–Ω–æ ‚úîÔ∏è\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: " + hint)

    await m.answer(fmt_point(POINTS[nxt]))


async def main():
    print("‚úÖ Bot is running. –û—Ç–∫—Ä–æ–π Telegram –∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ–º—É –±–æ—Ç—É /start")
    await dp.start_polling(bot)


# ---- –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ----
from aiohttp import web

async def handle(request):
    return web.Response(text="Bot is running!")

app = web.Application()
app.router.add_get("/", handle)

if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 10000))
    web.run_app(app, port=port)
